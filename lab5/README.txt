Звіт по Python-коду

Наведений код включає в собі вісім функцій (task1 до task8), кожна з яких виконує різні маніпуляції зі словниками, рядками та масивами. Ось докладний опис кожної функції:
    Призначення: Об'єднує кілька словників в один.
    Вхідні дані:
        dict_list (тип list): Список словників для об'єднання.
    Вихідні дані:
        Об'єднаний словник (тип dict).

Докладний опис:
Функція task1 приймає список dict_list, який містить кілька словників. Вона використовує метод update() для об'єднання всіх словників у один merged_dict, який повертається як результат.

Приклад використання:

result = task1([{'a': 1, 'b': 2}, {'c': 3}, {'d': 4}])
print(result)  # Виведе: {'a': 1, 'b': 2, 'c': 3, 'd': 4}

2. Функція task2

    Призначення: Перетворює рядок у масив і його байтове представлення.
    Вхідні дані:
        input_string (тип str): Рядок з іменем масиву та його значеннями.
    Вихідні дані:
        interpreted_array (тип array.array): Об'єкт масиву з інтерпретованими значеннями.
        bytes_representation (тип bytes): Байтове представлення масиву.

Докладний опис:
Функція task2 розбиває вхідний рядок input_string на ім'я масиву та його значення. Після цього вона створює масив interpreted_array з використанням типу і значень, а також генерує його байтове представлення за допомогою методу tobytes().

Приклад використання:

result_array, result_bytes = task2("my_array: array('i', [1, 2, 3])")
print(result_array)         # Виведе: array('i', [1, 2, 3])
print(result_bytes)         # Виведе: b'\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00'

3. Функція task3

    Призначення: Видаляє дублікати з масиву.
    Вхідні дані:
        input_array (тип list або array.array): Масив з елементами.
    Вихідні дані:
        unique_elements (тип list): Список унікальних елементів з вхідного масиву.

Докладний опис:
Функція task3 проходиться по кожному елементу у вхідному масиві input_array і додає його до unique_elements, якщо його там ще немає.

Приклад використання:

result = task3([1, 2, 2, 3, 4, 4, 5])
print(result)  # Виведе: [1, 2, 3, 4, 5]

4. Функція task4

    Призначення: Знаходить пропущене число у діапазоні від 10 до 20.
    Вхідні дані:
        input_array (тип list або array.array): Масив з числами.
    Вихідні дані:
        Число, яке відсутнє у вхідному масиві, але присутнє у діапазоні від 10 до 20 (тип int) або None, якщо такого числа немає.

Докладний опис:
Функція task4 створює множину full_range з усіх чисел у діапазоні від 10 до 20. Потім вона створює множину input_set з чисел у вхідному масиві input_array і визначає відсутні числа за допомогою операції різниці множин. Якщо пропущене число знайдено, воно повертається; якщо ні, повертається None.

Приклад використання:

result = task4([11, 12, 14, 15, 16, 17, 18, 19, 20])
print(result)  # Виведе: 13

5. Функція task5

    Призначення: Знаходить унікальні значення у всіх словниках і підраховує їх кількість.
    Вхідні дані:
        dict_list (тип list): Список словників.
    Вихідні дані:
        distinct (тип list): Список унікальних значень.
        unique_count (тип int): Кількість унікальних значень у списку distinct.

Докладний опис:
Функція task5 перевіряє кожне значення у всіх словниках dict_list. Якщо значення ще не міститься у distinct, воно додається до distinct. Після цього обчислюється кількість унікальних значень unique_count і повертаються обидва результати.

Приклад використання:

result = task5([{'a': 1, 'b': 2}, {'c': 3, 'd': 2}, {'e': 1}])
print(result)  # Виведе: [1, 2, 3]

6. Функція task6

    Призначення: Обчислює загальну кількість можливих комбінацій ключів у всіх словниках.
    Вхідні дані:
        dictionaries (тип list): Список словників.
    Вихідні дані:
        combinations_count (тип int): Загальна кількість можливих комбінацій ключів.

Докладний опис:
Функція task6 створює список letters_lists, що містить списки ключів для кожного словника у dictionaries. Потім вона обчислює загальну кількість комбінацій ключів, множачи кількість ключів у кожному словнику. Результат повертається як combinations_count.

Приклад використання:

result = task6([{'a': 1, 'b': 2}, {'c': 3}, {'d': 4, 'e': 5}])
print(result)  # Виведе: 6 (так як 2 * 1 * 2 = 6)

7. Функція task7

    Призначення: Знаходить три найбільші ключі у словнику за значенням.
    Вхідні дані:
        dictionary (тип dict): Словник з ключами та числовими значеннями.
    Вихідні дані:
        largest_keys (тип list): Список трьох найбільших ключів у словнику.

Докладний опис:
Функція task7 сортує ключі словника dictionary у зворотньому порядку і обирає перші три ключі як largest_keys, які повертається як результат.

Приклад використання:

result = task7({'a': 10, 'b': 5, 'c': 15, 'd': 3})
print(result)  # Виведе: ['d', 'c', 'a']

8. Функція task8
    Призначення: Об'єднує значення для однакових елементів у списку словників.
    Вхідні дані:
        dict_list (тип list): Список словників з ключами 'item' і 'amount'.
    Вихідні дані:
        combined_values (тип dict): Словник з об'єднаними значеннями для кожного унікального 'item'.

Докладний опис:
Функція task8 перебирає кожен словник у списку dict_list і об'єднує значення 'amount' для однакових 'item' у словнику combined_values.

Приклад використання:

result = task8([{'item': 'apple', 'amount': 2}, {'item': 'banana', 'amount': 3}, {'item': 'apple', 'amount': 1}])
print(result)  # Виведе: {'apple': 3, 'banana': 3}